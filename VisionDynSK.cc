// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "Vision.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::TypeCode_ptr _0RL_tc_Img_mMat44 = CORBA::TypeCode::PR_alias_tc("IDL:Img/Mat44:1.0", "Mat44", CORBA::TypeCode::PR_array_tc(4, CORBA::TypeCode::PR_array_tc(4, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack), &_0RL_tcTrack), &_0RL_tcTrack);


static CORBA::TypeCode_ptr _0RL_tc_Img_mVec3 = CORBA::TypeCode::PR_alias_tc("IDL:Img/Vec3:1.0", "Vec3", CORBA::TypeCode::PR_array_tc(3, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack), &_0RL_tcTrack);


static CORBA::PR_structMember _0RL_structmember_PointCloud[] = {
  {"id", CORBA::TypeCode::PR_long_tc()},
  {"T", _0RL_tc_Img_mMat44},
  {"point", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_Img_mVec3, &_0RL_tcTrack)},
  {"color", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_Img_mVec3, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_PointCloud
#  undef _0RL_tc_PointCloud
#endif
static CORBA::TypeCode_ptr _0RL_tc_PointCloud = CORBA::TypeCode::PR_struct_tc("IDL:PointCloud:1.0", "PointCloud", _0RL_structmember_PointCloud, 4, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_PointCloud = _0RL_tc_PointCloud;


static CORBA::PR_structMember _0RL_structmember_RTC_mTime[] = {
  {"sec", CORBA::TypeCode::PR_ulong_tc()},
  {"nsec", CORBA::TypeCode::PR_ulong_tc()}
};

#ifdef _0RL_tc_RTC_mTime
#  undef _0RL_tc_RTC_mTime
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mTime = CORBA::TypeCode::PR_struct_tc("IDL:RTC/Time:1.0", "Time", _0RL_structmember_RTC_mTime, 2, &_0RL_tcTrack);


static CORBA::PR_structMember _0RL_structmember_TimedPointCloud[] = {
  {"tm", _0RL_tc_RTC_mTime},
  {"data", _0RL_tc_PointCloud},
  {"error_code", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_TimedPointCloud
#  undef _0RL_tc_TimedPointCloud
#endif
static CORBA::TypeCode_ptr _0RL_tc_TimedPointCloud = CORBA::TypeCode::PR_struct_tc("IDL:TimedPointCloud:1.0", "TimedPointCloud", _0RL_structmember_TimedPointCloud, 3, &_0RL_tcTrack);



const CORBA::TypeCode_ptr _tc_TimedPointCloud = _0RL_tc_TimedPointCloud;







static const char* _0RL_enumMember_Img_mColorFormat[] = { "CF_UNKNOWN", "CF_GRAY", "CF_RGB" };
static CORBA::TypeCode_ptr _0RL_tc_Img_mColorFormat = CORBA::TypeCode::PR_enum_tc("IDL:Img/ColorFormat:1.0", "ColorFormat", _0RL_enumMember_Img_mColorFormat, 3, &_0RL_tcTrack);
static CORBA::PR_structMember _0RL_structmember_Img_mImageData[] = {
  {"width", CORBA::TypeCode::PR_long_tc()},
  {"height", CORBA::TypeCode::PR_long_tc()},
  {"format", _0RL_tc_Img_mColorFormat},
  {"raw_data", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_octet_tc(), &_0RL_tcTrack)}
};

#ifdef _0RL_tc_Img_mImageData
#  undef _0RL_tc_Img_mImageData
#endif
static CORBA::TypeCode_ptr _0RL_tc_Img_mImageData = CORBA::TypeCode::PR_struct_tc("IDL:Img/ImageData:1.0", "ImageData", _0RL_structmember_Img_mImageData, 4, &_0RL_tcTrack);

static CORBA::PR_structMember _0RL_structmember_Img_mCameraIntrinsicParameter[] = {
  {"matrix_element", CORBA::TypeCode::PR_array_tc(5, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack)},
  {"distortion_coefficient", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack)}
};

#ifdef _0RL_tc_Img_mCameraIntrinsicParameter
#  undef _0RL_tc_Img_mCameraIntrinsicParameter
#endif
static CORBA::TypeCode_ptr _0RL_tc_Img_mCameraIntrinsicParameter = CORBA::TypeCode::PR_struct_tc("IDL:Img/CameraIntrinsicParameter:1.0", "CameraIntrinsicParameter", _0RL_structmember_Img_mCameraIntrinsicParameter, 2, &_0RL_tcTrack);

static CORBA::PR_structMember _0RL_structmember_Img_mCameraImage[] = {
  {"captured_time", _0RL_tc_RTC_mTime},
  {"image", _0RL_tc_Img_mImageData},
  {"intrinsic", _0RL_tc_Img_mCameraIntrinsicParameter},
  {"extrinsic", _0RL_tc_Img_mMat44}
};

#ifdef _0RL_tc_Img_mCameraImage
#  undef _0RL_tc_Img_mCameraImage
#endif
static CORBA::TypeCode_ptr _0RL_tc_Img_mCameraImage = CORBA::TypeCode::PR_struct_tc("IDL:Img/CameraImage:1.0", "CameraImage", _0RL_structmember_Img_mCameraImage, 4, &_0RL_tcTrack);

static CORBA::PR_structMember _0RL_structmember_Img_mMultiCameraImage[] = {
  {"image_seq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_Img_mCameraImage, &_0RL_tcTrack)},
  {"camera_set_id", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_Img_mMultiCameraImage
#  undef _0RL_tc_Img_mMultiCameraImage
#endif
static CORBA::TypeCode_ptr _0RL_tc_Img_mMultiCameraImage = CORBA::TypeCode::PR_struct_tc("IDL:Img/MultiCameraImage:1.0", "MultiCameraImage", _0RL_structmember_Img_mMultiCameraImage, 2, &_0RL_tcTrack);

static CORBA::PR_structMember _0RL_structmember_Img_mTimedMultiCameraImage[] = {
  {"tm", _0RL_tc_RTC_mTime},
  {"data", _0RL_tc_Img_mMultiCameraImage},
  {"error_code", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_Img_mTimedMultiCameraImage
#  undef _0RL_tc_Img_mTimedMultiCameraImage
#endif
static CORBA::TypeCode_ptr _0RL_tc_Img_mTimedMultiCameraImage = CORBA::TypeCode::PR_struct_tc("IDL:Img/TimedMultiCameraImage:1.0", "TimedMultiCameraImage", _0RL_structmember_Img_mTimedMultiCameraImage, 3, &_0RL_tcTrack);

static CORBA::PR_structMember _0RL_structmember_Stereo3D[] = {
  {"obj", _0RL_tc_TimedPointCloud},
  {"mimg", _0RL_tc_Img_mTimedMultiCameraImage}
};

#ifdef _0RL_tc_Stereo3D
#  undef _0RL_tc_Stereo3D
#endif
static CORBA::TypeCode_ptr _0RL_tc_Stereo3D = CORBA::TypeCode::PR_struct_tc("IDL:Stereo3D:1.0", "Stereo3D", _0RL_structmember_Stereo3D, 2, &_0RL_tcTrack);











const CORBA::TypeCode_ptr _tc_Stereo3D = _0RL_tc_Stereo3D;














static CORBA::PR_structMember _0RL_structmember_TimedStereo3D[] = {
  {"tm", _0RL_tc_RTC_mTime},
  {"data", _0RL_tc_Stereo3D},
  {"error_code", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_TimedStereo3D
#  undef _0RL_tc_TimedStereo3D
#endif
static CORBA::TypeCode_ptr _0RL_tc_TimedStereo3D = CORBA::TypeCode::PR_struct_tc("IDL:TimedStereo3D:1.0", "TimedStereo3D", _0RL_structmember_TimedStereo3D, 3, &_0RL_tcTrack);













const CORBA::TypeCode_ptr _tc_TimedStereo3D = _0RL_tc_TimedStereo3D;



static CORBA::PR_structMember _0RL_structmember_RTC_mTimedDoubleSeq[] = {
  {"tm", _0RL_tc_RTC_mTime},
  {"data", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack)}
};

#ifdef _0RL_tc_RTC_mTimedDoubleSeq
#  undef _0RL_tc_RTC_mTimedDoubleSeq
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mTimedDoubleSeq = CORBA::TypeCode::PR_struct_tc("IDL:RTC/TimedDoubleSeq:1.0", "TimedDoubleSeq", _0RL_structmember_RTC_mTimedDoubleSeq, 2, &_0RL_tcTrack);







static CORBA::TypeCode_ptr _0RL_tc_TimedRecognitionResult = CORBA::TypeCode::PR_alias_tc("IDL:TimedRecognitionResult:1.0", "TimedRecognitionResult", _0RL_tc_RTC_mTimedDoubleSeq, &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_TimedRecognitionResult = _0RL_tc_TimedRecognitionResult;

const CORBA::TypeCode_ptr _tc_Reconstruct3DService = CORBA::TypeCode::PR_interface_tc("IDL:Reconstruct3DService:1.0", "Reconstruct3DService", &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_RecognitionService = CORBA::TypeCode::PR_interface_tc("IDL:RecognitionService:1.0", "RecognitionService", &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_RecognitionResultViewerService = CORBA::TypeCode::PR_interface_tc("IDL:RecognitionResultViewerService:1.0", "RecognitionResultViewerService", &_0RL_tcTrack);

static void _0RL_PointCloud_marshal_fn(cdrStream& _s, void* _v)
{
  PointCloud* _p = (PointCloud*)_v;
  *_p >>= _s;
}
static void _0RL_PointCloud_unmarshal_fn(cdrStream& _s, void*& _v)
{
  PointCloud* _p = new PointCloud;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_PointCloud_destructor_fn(void* _v)
{
  PointCloud* _p = (PointCloud*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const PointCloud& _s)
{
  PointCloud* _p = new PointCloud(_s);
  _a.PR_insert(_0RL_tc_PointCloud,
               _0RL_PointCloud_marshal_fn,
               _0RL_PointCloud_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, PointCloud* _sp)
{
  _a.PR_insert(_0RL_tc_PointCloud,
               _0RL_PointCloud_marshal_fn,
               _0RL_PointCloud_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, PointCloud*& _sp)
{
  return _a >>= (const PointCloud*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const PointCloud*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_PointCloud,
                    _0RL_PointCloud_unmarshal_fn,
                    _0RL_PointCloud_marshal_fn,
                    _0RL_PointCloud_destructor_fn,
                    _v)) {
    _sp = (const PointCloud*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_TimedPointCloud_marshal_fn(cdrStream& _s, void* _v)
{
  TimedPointCloud* _p = (TimedPointCloud*)_v;
  *_p >>= _s;
}
static void _0RL_TimedPointCloud_unmarshal_fn(cdrStream& _s, void*& _v)
{
  TimedPointCloud* _p = new TimedPointCloud;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_TimedPointCloud_destructor_fn(void* _v)
{
  TimedPointCloud* _p = (TimedPointCloud*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const TimedPointCloud& _s)
{
  TimedPointCloud* _p = new TimedPointCloud(_s);
  _a.PR_insert(_0RL_tc_TimedPointCloud,
               _0RL_TimedPointCloud_marshal_fn,
               _0RL_TimedPointCloud_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, TimedPointCloud* _sp)
{
  _a.PR_insert(_0RL_tc_TimedPointCloud,
               _0RL_TimedPointCloud_marshal_fn,
               _0RL_TimedPointCloud_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, TimedPointCloud*& _sp)
{
  return _a >>= (const TimedPointCloud*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const TimedPointCloud*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_TimedPointCloud,
                    _0RL_TimedPointCloud_unmarshal_fn,
                    _0RL_TimedPointCloud_marshal_fn,
                    _0RL_TimedPointCloud_destructor_fn,
                    _v)) {
    _sp = (const TimedPointCloud*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Stereo3D_marshal_fn(cdrStream& _s, void* _v)
{
  Stereo3D* _p = (Stereo3D*)_v;
  *_p >>= _s;
}
static void _0RL_Stereo3D_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Stereo3D* _p = new Stereo3D;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Stereo3D_destructor_fn(void* _v)
{
  Stereo3D* _p = (Stereo3D*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Stereo3D& _s)
{
  Stereo3D* _p = new Stereo3D(_s);
  _a.PR_insert(_0RL_tc_Stereo3D,
               _0RL_Stereo3D_marshal_fn,
               _0RL_Stereo3D_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Stereo3D* _sp)
{
  _a.PR_insert(_0RL_tc_Stereo3D,
               _0RL_Stereo3D_marshal_fn,
               _0RL_Stereo3D_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Stereo3D*& _sp)
{
  return _a >>= (const Stereo3D*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Stereo3D*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Stereo3D,
                    _0RL_Stereo3D_unmarshal_fn,
                    _0RL_Stereo3D_marshal_fn,
                    _0RL_Stereo3D_destructor_fn,
                    _v)) {
    _sp = (const Stereo3D*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_TimedStereo3D_marshal_fn(cdrStream& _s, void* _v)
{
  TimedStereo3D* _p = (TimedStereo3D*)_v;
  *_p >>= _s;
}
static void _0RL_TimedStereo3D_unmarshal_fn(cdrStream& _s, void*& _v)
{
  TimedStereo3D* _p = new TimedStereo3D;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_TimedStereo3D_destructor_fn(void* _v)
{
  TimedStereo3D* _p = (TimedStereo3D*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const TimedStereo3D& _s)
{
  TimedStereo3D* _p = new TimedStereo3D(_s);
  _a.PR_insert(_0RL_tc_TimedStereo3D,
               _0RL_TimedStereo3D_marshal_fn,
               _0RL_TimedStereo3D_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, TimedStereo3D* _sp)
{
  _a.PR_insert(_0RL_tc_TimedStereo3D,
               _0RL_TimedStereo3D_marshal_fn,
               _0RL_TimedStereo3D_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, TimedStereo3D*& _sp)
{
  return _a >>= (const TimedStereo3D*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const TimedStereo3D*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_TimedStereo3D,
                    _0RL_TimedStereo3D_unmarshal_fn,
                    _0RL_TimedStereo3D_marshal_fn,
                    _0RL_TimedStereo3D_destructor_fn,
                    _v)) {
    _sp = (const TimedStereo3D*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Reconstruct3DService_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_Reconstruct3DService_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(Reconstruct3DService::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_Reconstruct3DService_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, Reconstruct3DService_ptr _o)
{
  Reconstruct3DService_ptr _no = Reconstruct3DService::_duplicate(_o);
  _a.PR_insert(_tc_Reconstruct3DService,
               _0RL_Reconstruct3DService_marshal_fn,
               _0RL_Reconstruct3DService_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, Reconstruct3DService_ptr* _op)
{
  _a.PR_insert(_tc_Reconstruct3DService,
               _0RL_Reconstruct3DService_marshal_fn,
               _0RL_Reconstruct3DService_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = Reconstruct3DService::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Reconstruct3DService_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(_tc_Reconstruct3DService,
                    _0RL_Reconstruct3DService_unmarshal_fn,
                    _0RL_Reconstruct3DService_marshal_fn,
                    _0RL_Reconstruct3DService_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (Reconstruct3DService_ptr)_r->_ptrToObjRef(Reconstruct3DService::_PD_repoId);
    else
      _o = Reconstruct3DService::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_RecognitionService_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_RecognitionService_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(RecognitionService::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_RecognitionService_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, RecognitionService_ptr _o)
{
  RecognitionService_ptr _no = RecognitionService::_duplicate(_o);
  _a.PR_insert(_tc_RecognitionService,
               _0RL_RecognitionService_marshal_fn,
               _0RL_RecognitionService_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, RecognitionService_ptr* _op)
{
  _a.PR_insert(_tc_RecognitionService,
               _0RL_RecognitionService_marshal_fn,
               _0RL_RecognitionService_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = RecognitionService::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, RecognitionService_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(_tc_RecognitionService,
                    _0RL_RecognitionService_unmarshal_fn,
                    _0RL_RecognitionService_marshal_fn,
                    _0RL_RecognitionService_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (RecognitionService_ptr)_r->_ptrToObjRef(RecognitionService::_PD_repoId);
    else
      _o = RecognitionService::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_RecognitionResultViewerService_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_RecognitionResultViewerService_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(RecognitionResultViewerService::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_RecognitionResultViewerService_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, RecognitionResultViewerService_ptr _o)
{
  RecognitionResultViewerService_ptr _no = RecognitionResultViewerService::_duplicate(_o);
  _a.PR_insert(_tc_RecognitionResultViewerService,
               _0RL_RecognitionResultViewerService_marshal_fn,
               _0RL_RecognitionResultViewerService_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, RecognitionResultViewerService_ptr* _op)
{
  _a.PR_insert(_tc_RecognitionResultViewerService,
               _0RL_RecognitionResultViewerService_marshal_fn,
               _0RL_RecognitionResultViewerService_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = RecognitionResultViewerService::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, RecognitionResultViewerService_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(_tc_RecognitionResultViewerService,
                    _0RL_RecognitionResultViewerService_unmarshal_fn,
                    _0RL_RecognitionResultViewerService_marshal_fn,
                    _0RL_RecognitionResultViewerService_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (RecognitionResultViewerService_ptr)_r->_ptrToObjRef(RecognitionResultViewerService::_PD_repoId);
    else
      _o = RecognitionResultViewerService::_nil();
    return 1;
  }
  return 0;
}

