// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __Vision_hh__
#define __Vision_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_Vision
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_Vision
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_Vision
#endif



#ifndef __BasicDataType_hh_EXTERNAL_GUARD__
#define __BasicDataType_hh_EXTERNAL_GUARD__
#include <BasicDataType.hh>
#endif
#ifndef __Img_hh_EXTERNAL_GUARD__
#define __Img_hh_EXTERNAL_GUARD__
#include <Img.hh>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





struct PointCloud {
  typedef _CORBA_ConstrType_Variable_Var<PointCloud> _var_type;

  
  ::CORBA::Long id;

  Img::Mat44 T;

  typedef _CORBA_Unbounded_Sequence_Array_w_FixSizeElement< Img::Vec3, Img::Vec3_slice, ::CORBA::Double, 3, 8, 8 >  _point_seq;
  _point_seq point;

  typedef _CORBA_Unbounded_Sequence_Array_w_FixSizeElement< Img::Vec3, Img::Vec3_slice, ::CORBA::Double, 3, 8, 8 >  _color_seq;
  _color_seq color;



  void operator>>= (cdrStream &) const;
  void operator<<= (cdrStream &);
};

typedef PointCloud::_var_type PointCloud_var;

typedef _CORBA_ConstrType_Variable_OUT_arg< PointCloud,PointCloud_var > PointCloud_out;

_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PointCloud;

struct TimedPointCloud {
  typedef _CORBA_ConstrType_Variable_Var<TimedPointCloud> _var_type;

  
  RTC::Time tm;

  PointCloud data;

  ::CORBA::Long error_code;



  void operator>>= (cdrStream &) const;
  void operator<<= (cdrStream &);
};

typedef TimedPointCloud::_var_type TimedPointCloud_var;

typedef _CORBA_ConstrType_Variable_OUT_arg< TimedPointCloud,TimedPointCloud_var > TimedPointCloud_out;

_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_TimedPointCloud;

struct Stereo3D {
  typedef _CORBA_ConstrType_Variable_Var<Stereo3D> _var_type;

  
  TimedPointCloud obj;

  Img::TimedMultiCameraImage mimg;



  void operator>>= (cdrStream &) const;
  void operator<<= (cdrStream &);
};

typedef Stereo3D::_var_type Stereo3D_var;

typedef _CORBA_ConstrType_Variable_OUT_arg< Stereo3D,Stereo3D_var > Stereo3D_out;

_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Stereo3D;

struct TimedStereo3D {
  typedef _CORBA_ConstrType_Variable_Var<TimedStereo3D> _var_type;

  
  RTC::Time tm;

  Stereo3D data;

  ::CORBA::Long error_code;



  void operator>>= (cdrStream &) const;
  void operator<<= (cdrStream &);
};

typedef TimedStereo3D::_var_type TimedStereo3D_var;

typedef _CORBA_ConstrType_Variable_OUT_arg< TimedStereo3D,TimedStereo3D_var > TimedStereo3D_out;

_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_TimedStereo3D;

_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_TimedRecognitionResult;

typedef RTC::TimedDoubleSeq TimedRecognitionResult;
typedef RTC::TimedDoubleSeq_var TimedRecognitionResult_var;
typedef RTC::TimedDoubleSeq_out TimedRecognitionResult_out;

#ifndef __Reconstruct3DService__
#define __Reconstruct3DService__

class Reconstruct3DService;
class _objref_Reconstruct3DService;
class _impl_Reconstruct3DService;

typedef _objref_Reconstruct3DService* Reconstruct3DService_ptr;
typedef Reconstruct3DService_ptr Reconstruct3DServiceRef;

class Reconstruct3DService_Helper {
public:
  typedef Reconstruct3DService_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_Reconstruct3DService, Reconstruct3DService_Helper> Reconstruct3DService_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_Reconstruct3DService,Reconstruct3DService_Helper > Reconstruct3DService_out;

#endif

// interface Reconstruct3DService
class Reconstruct3DService {
public:
  // Declarations for this interface type.
  typedef Reconstruct3DService_ptr _ptr_type;
  typedef Reconstruct3DService_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(::CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
  
  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  
};

class _objref_Reconstruct3DService :
  public virtual ::CORBA::Object,
  public virtual omniObjRef
{
public:
  void reconstruct();

  inline _objref_Reconstruct3DService()  { _PR_setobj(0); }  // nil
  _objref_Reconstruct3DService(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_Reconstruct3DService();

  
private:
  virtual void* _ptrToObjRef(const char*);

  _objref_Reconstruct3DService(const _objref_Reconstruct3DService&);
  _objref_Reconstruct3DService& operator = (const _objref_Reconstruct3DService&);
  // not implemented

  friend class Reconstruct3DService;
};

class _pof_Reconstruct3DService : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_Reconstruct3DService() : _OMNI_NS(proxyObjectFactory)(Reconstruct3DService::_PD_repoId) {}
  virtual ~_pof_Reconstruct3DService();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_Reconstruct3DService :
  public virtual omniServant
{
public:
  virtual ~_impl_Reconstruct3DService();

  virtual void reconstruct() = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
  
};


_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Reconstruct3DService;

#ifndef __RecognitionService__
#define __RecognitionService__

class RecognitionService;
class _objref_RecognitionService;
class _impl_RecognitionService;

typedef _objref_RecognitionService* RecognitionService_ptr;
typedef RecognitionService_ptr RecognitionServiceRef;

class RecognitionService_Helper {
public:
  typedef RecognitionService_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_RecognitionService, RecognitionService_Helper> RecognitionService_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_RecognitionService,RecognitionService_Helper > RecognitionService_out;

#endif

// interface RecognitionService
class RecognitionService {
public:
  // Declarations for this interface type.
  typedef RecognitionService_ptr _ptr_type;
  typedef RecognitionService_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(::CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
  
  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  
};

class _objref_RecognitionService :
  public virtual ::CORBA::Object,
  public virtual omniObjRef
{
public:
  ::CORBA::Long getModelID();
  void setModelID(::CORBA::Long ModelID);

  inline _objref_RecognitionService()  { _PR_setobj(0); }  // nil
  _objref_RecognitionService(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_RecognitionService();

  
private:
  virtual void* _ptrToObjRef(const char*);

  _objref_RecognitionService(const _objref_RecognitionService&);
  _objref_RecognitionService& operator = (const _objref_RecognitionService&);
  // not implemented

  friend class RecognitionService;
};

class _pof_RecognitionService : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_RecognitionService() : _OMNI_NS(proxyObjectFactory)(RecognitionService::_PD_repoId) {}
  virtual ~_pof_RecognitionService();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_RecognitionService :
  public virtual omniServant
{
public:
  virtual ~_impl_RecognitionService();

  virtual ::CORBA::Long getModelID() = 0;
  virtual void setModelID(::CORBA::Long ModelID) = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
  
};


_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RecognitionService;

#ifndef __RecognitionResultViewerService__
#define __RecognitionResultViewerService__

class RecognitionResultViewerService;
class _objref_RecognitionResultViewerService;
class _impl_RecognitionResultViewerService;

typedef _objref_RecognitionResultViewerService* RecognitionResultViewerService_ptr;
typedef RecognitionResultViewerService_ptr RecognitionResultViewerServiceRef;

class RecognitionResultViewerService_Helper {
public:
  typedef RecognitionResultViewerService_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_RecognitionResultViewerService, RecognitionResultViewerService_Helper> RecognitionResultViewerService_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_RecognitionResultViewerService,RecognitionResultViewerService_Helper > RecognitionResultViewerService_out;

#endif

// interface RecognitionResultViewerService
class RecognitionResultViewerService {
public:
  // Declarations for this interface type.
  typedef RecognitionResultViewerService_ptr _ptr_type;
  typedef RecognitionResultViewerService_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(::CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
  
  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  
};

class _objref_RecognitionResultViewerService :
  public virtual ::CORBA::Object,
  public virtual omniObjRef
{
public:
  void display(const Img::TimedMultiCameraImage& frame, const TimedRecognitionResult& pos);

  inline _objref_RecognitionResultViewerService()  { _PR_setobj(0); }  // nil
  _objref_RecognitionResultViewerService(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_RecognitionResultViewerService();

  
private:
  virtual void* _ptrToObjRef(const char*);

  _objref_RecognitionResultViewerService(const _objref_RecognitionResultViewerService&);
  _objref_RecognitionResultViewerService& operator = (const _objref_RecognitionResultViewerService&);
  // not implemented

  friend class RecognitionResultViewerService;
};

class _pof_RecognitionResultViewerService : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_RecognitionResultViewerService() : _OMNI_NS(proxyObjectFactory)(RecognitionResultViewerService::_PD_repoId) {}
  virtual ~_pof_RecognitionResultViewerService();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_RecognitionResultViewerService :
  public virtual omniServant
{
public:
  virtual ~_impl_RecognitionResultViewerService();

  virtual void display(const Img::TimedMultiCameraImage& frame, const TimedRecognitionResult& pos) = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
  
};


_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RecognitionResultViewerService;



class POA_Reconstruct3DService :
  public virtual _impl_Reconstruct3DService,
  public virtual ::PortableServer::ServantBase
{
public:
  virtual ~POA_Reconstruct3DService();

  inline ::Reconstruct3DService_ptr _this() {
    return (::Reconstruct3DService_ptr) _do_this(::Reconstruct3DService::_PD_repoId);
  }
};

class POA_RecognitionService :
  public virtual _impl_RecognitionService,
  public virtual ::PortableServer::ServantBase
{
public:
  virtual ~POA_RecognitionService();

  inline ::RecognitionService_ptr _this() {
    return (::RecognitionService_ptr) _do_this(::RecognitionService::_PD_repoId);
  }
};

class POA_RecognitionResultViewerService :
  public virtual _impl_RecognitionResultViewerService,
  public virtual ::PortableServer::ServantBase
{
public:
  virtual ~POA_RecognitionResultViewerService();

  inline ::RecognitionResultViewerService_ptr _this() {
    return (::RecognitionResultViewerService_ptr) _do_this(::RecognitionResultViewerService::_PD_repoId);
  }
};







#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const PointCloud& _s);
extern void operator<<=(::CORBA::Any& _a, PointCloud* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, PointCloud*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const PointCloud*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TimedPointCloud& _s);
extern void operator<<=(::CORBA::Any& _a, TimedPointCloud* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TimedPointCloud*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TimedPointCloud*& _sp);

extern void operator<<=(::CORBA::Any& _a, const Stereo3D& _s);
extern void operator<<=(::CORBA::Any& _a, Stereo3D* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, Stereo3D*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const Stereo3D*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TimedStereo3D& _s);
extern void operator<<=(::CORBA::Any& _a, TimedStereo3D* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TimedStereo3D*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TimedStereo3D*& _sp);

void operator<<=(::CORBA::Any& _a, Reconstruct3DService_ptr _s);
void operator<<=(::CORBA::Any& _a, Reconstruct3DService_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, Reconstruct3DService_ptr& _s);

void operator<<=(::CORBA::Any& _a, RecognitionService_ptr _s);
void operator<<=(::CORBA::Any& _a, RecognitionService_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RecognitionService_ptr& _s);

void operator<<=(::CORBA::Any& _a, RecognitionResultViewerService_ptr _s);
void operator<<=(::CORBA::Any& _a, RecognitionResultViewerService_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RecognitionResultViewerService_ptr& _s);



inline void
Reconstruct3DService::_marshalObjRef(::Reconstruct3DService_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
RecognitionService::_marshalObjRef(::RecognitionService_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
RecognitionResultViewerService::_marshalObjRef(::RecognitionResultViewerService_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_Vision
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_Vision
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_Vision
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_Vision
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_Vision
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_Vision
#endif

#endif  // __Vision_hh__

